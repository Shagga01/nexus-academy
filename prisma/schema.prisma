// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Roles
enum Role {
  ADMIN
  TEACHER
  PARENT
  STUDENT
}

// User Model
model User {
  id               String          @id @default(uuid())
  email            String          @unique
  password         String          // Hashed password
  firstName        String
  lastName         String
  role             Role            @default(STUDENT)
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  refreshToken     String?         @unique // ADDED THIS LINE FOR REFRESH TOKENS

  // Relations
  studentProfile   StudentProfile?
  teacherProfile   TeacherProfile?
  parentProfile    ParentProfile?
  adminProfile     AdminProfile?
  enrollments      Enrollment[]
  createdCourses   Course[]        @relation("TeacherCourses")
  assignments      Assignment[]
  grades           Grade[]
  transactions     Transaction[]

  @@map("users") // Ensures the table name in the DB is 'users'
}

// Student Profile (extends User)
model StudentProfile {
  id           String     @id @default(uuid())
  userId       String     @unique
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  dateOfBirth  DateTime?
  address      String?
  phoneNumber  String?
  // Add other student-specific fields as needed
}

// Teacher Profile (extends User)
model TeacherProfile {
  id           String     @id @default(uuid())
  userId       String     @unique
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  bio          String?
  qualifications String?
  // Add other teacher-specific fields as needed
}

// Parent Profile (extends User)
model ParentProfile {
  id           String     @id @default(uuid())
  userId       String     @unique
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  // Add other parent-specific fields as needed
}

// Admin Profile (extends User)
model AdminProfile {
  id           String     @id @default(uuid())
  userId       String     @unique
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  // Add other admin-specific fields as needed
}

// Course Model
model Course {
  id          String     @id @default(uuid())
  title       String     @unique
  description String?
  price       Decimal    @db.Decimal(10, 2) // Price of the course
  isPublished Boolean    @default(false)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relations
  teacherId   String
  teacher     User       @relation("TeacherCourses", fields: [teacherId], references: [id])
  modules     Module[]
  enrollments Enrollment[]
}

// Module Model (part of a Course)
model Module {
  id          String   @id @default(uuid())
  title       String
  description String?
  order       Int      // Order within the course
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  courseId    String
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons     Lesson[]

  @@unique([courseId, order]) // Ensure unique order within a course
}

// Lesson Model (part of a Module)
model Lesson {
  id          String   @id @default(uuid())
  title       String
  content     String   // Markdown or HTML content for the lesson
  videoUrl    String?
  order       Int      // Order within the module
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  moduleId    String
  module      Module   @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  assignments Assignment[]

  @@unique([moduleId, order]) // Ensure unique order within a module
}

// Enrollment Model (Student enrolling in a Course)
model Enrollment {
  id          String   @id @default(uuid())
  studentId   String
  student     User     @relation(fields: [studentId], references: [id])
  courseId    String
  course      Course   @relation(fields: [courseId], references: [id])
  enrollmentDate DateTime @default(now())
  completed   Boolean  @default(false)
  progress    Int      @default(0) // Percentage of course completed
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([studentId, courseId]) // A student can only enroll in a course once
}

// Assignment Model
model Assignment {
  id          String   @id @default(uuid())
  title       String
  description String?
  dueDate     DateTime?
  maxScore    Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  lessonId    String
  lesson      Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  assignedToId String // User who assigned it (e.g., Teacher)
  assignedTo  User     @relation(fields: [assignedToId], references: [id])
  grades      Grade[]
}

// Grade Model
model Grade {
  id          String   @id @default(uuid())
  assignmentId String
  assignment  Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  studentId   String
  student     User     @relation(fields: [studentId], references: [id])
  score       Int
  feedback    String?
  submittedAt DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([assignmentId, studentId]) // A student gets one grade per assignment
}

// Transaction Model (for payments)
model Transaction {
  id          String    @id @default(uuid())
  userId      String    // User making the transaction (Student, Parent)
  user        User      @relation(fields: [userId], references: [id])
  amount      Decimal   @db.Decimal(10, 2)
  currency    String
  status      String    // e.g., "pending", "completed", "failed"
  paymentMethod String? // e.g., "Stripe", "Paystack", "Card"
  transactionRef String? @unique // Reference from payment gateway
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}
// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // Example: postgresql://user:pass@localhost:5432/db?schema=public
}

enum Role {
  ADMIN
  TEACHER
  PARENT
  STUDENT
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

model User {
  id             String   @id @default(uuid())
  email          String   @unique
  password       String // IMPORTANT: Hash this before saving
  firstName      String
  lastName       String
  role           Role     @default(STUDENT)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  refreshToken   String?  @unique
  totpSecret     String?
  isTwoFAEnabled Boolean  @default(false)

  studentProfile StudentProfile?
  teacherProfile TeacherProfile?
  parentProfile  ParentProfile?
  adminProfile   AdminProfile?
  enrollments    Enrollment[]
  createdCourses Course[]        @relation("TeacherCourses")
  assignments    Assignment[]
  grades         Grade[]
  transactions   Transaction[]

  @@map("users")
}

model StudentProfile {
  id          String    @id @default(uuid())
  userId      String    @unique
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  dateOfBirth DateTime?
  address     String?
  phoneNumber String?
}

model TeacherProfile {
  id             String  @id @default(uuid())
  userId         String  @unique
  user           User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  bio            String?
  qualifications String?
}

model ParentProfile {
  id     String @id @default(uuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AdminProfile {
  id     String @id @default(uuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Course {
  id            String       @id @default(uuid())
  title         String       @unique
  description   String?
  price         Decimal      @db.Decimal(10, 2)
  isPublished   Boolean      @default(false)
  status        CourseStatus @default(DRAFT)
  durationHours Int
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  teacherId   String
  teacher     User         @relation("TeacherCourses", fields: [teacherId], references: [id])
  modules     Module[]
  enrollments Enrollment[]
}

model Module {
  id          String   @id @default(uuid())
  title       String
  description String?
  order       Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  courseId String
  course   Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons  Lesson[]

  @@unique([courseId, order])
}

model Lesson {
  id                 String   @id @default(uuid())
  title              String
  content            String
  videoUrl           String?
  order              Int
  learningObjectives String?
  autoQuizJson       Json?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  moduleId    String
  module      Module       @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  assignments Assignment[]

  @@unique([moduleId, order])
}

model Enrollment {
  id             String   @id @default(uuid())
  studentId      String
  student        User     @relation(fields: [studentId], references: [id])
  courseId       String
  course         Course   @relation(fields: [courseId], references: [id])
  enrollmentDate DateTime @default(now())
  completed      Boolean  @default(false)
  progress       Int      @default(0)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@unique([studentId, courseId])
}

model Assignment {
  id          String    @id @default(uuid())
  title       String
  description String?
  dueDate     DateTime?
  maxScore    Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  lessonId     String
  lesson       Lesson  @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  assignedToId String
  assignedTo   User    @relation(fields: [assignedToId], references: [id])
  grades       Grade[]
}

model Grade {
  id           String     @id @default(uuid())
  assignmentId String
  assignment   Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  studentId    String
  student      User       @relation(fields: [studentId], references: [id])
  score        Int
  feedback     String?
  submittedAt  DateTime   @default(now())
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@unique([assignmentId, studentId])
}

model Transaction {
  id             String   @id @default(uuid())
  userId         String
  user           User     @relation(fields: [userId], references: [id])
  amount         Decimal  @db.Decimal(10, 2)
  currency       String
  status         String
  paymentMethod  String?
  transactionRef String?  @unique
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}
